import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException 
import time
import requests
import datetime
import sys

# =================================================================
# üîë CREDENCIAIS E CONFIGURA√á√ïES
# =================================================================

# --- ‚úÖ CONFIGURA√á√ÉO DO TELEGRAM (CORRIGIDA COM SEUS DADOS) ‚úÖ ---
TELEGRAM_TOKEN = "8217345207:AAEf5DjyRgIzxtDlTZVJX5bOjLw-uSg_i5o" 
CHAT_ID = "-1003156785631"      
# ----------------------------------------

# Vari√°veis globais para a l√≥gica de 'IA' (Simula√ß√£o)
contador_de_sete = 0 
LAST_RESULT = ""

# =================================================================
# ‚öôÔ∏è FUN√á√ïES DE SERVI√áO (TELEGRAM)
# =================================================================

def send_telegram_message(message):
    """Envia uma mensagem de texto formatada para o Telegram."""
    
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    
    # Par√¢metros da mensagem
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'HTML' # Permite negrito, it√°lico, etc.
    }
    
    try:
        response = requests.post(url, data=payload)
        response.raise_for_status() # Lan√ßa erro para status ruins
        print("‚úÖ Mensagem enviada com sucesso para o Telegram.")
    except requests.exceptions.RequestException as e:
        # Este erro deve SUMIR agora que o Token e o ID est√£o corretos
        print(f"‚ùå ERRO ao enviar mensagem para o Telegram. Verifique Token/Chat ID e conex√£o: {e}")

def create_suggestion_message(suggested_bet, condition, martingale_level=0):
    """Formata a mensagem que ser√° enviada para o Telegram."""
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")

    # Mensagem Sugerida
    message = (
        f"<b>==============================</b>\n"
        f"<b>üö® SINAL AI - CRASH TIME (SIMULADO) üö®</b>\n"
        f"<b>==============================</b>\n"
        f"<b>üéØ CONDI√á√ÉO DE ENTRADA:</b> {condition}\n"
        f"<b>üé∞ SUGERIDO:</b> Aposta em <b>{suggested_bet}</b>\n"
        f"<b>üìà MARTINGALE:</b> N√≠vel {martingale_level}\n"
        f"<b>‚è∞ HORA DO SINAL:</b> {timestamp}\n"
        f"<i>Fonte: gamblingcounting.com (Refer√™ncia de Teste)</i>"
    )
    return message

def analyze_and_suggest(current_result):
    """Simula a l√≥gica de 'IA' e sugere uma aposta (Sugere X ap√≥s Y)."""
    global contador_de_sete, LAST_RESULT

    # A l√≥gica SIMULA uma sugest√£o de "apostar no 7 ap√≥s 3 n√∫meros diferentes de 7"
    
    if current_result == "7":
        print("L√ìGICA: Resultado '7' encontrado. Zerando o contador.")
        contador_de_sete = 0
    elif current_result.isdigit() and current_result != "7":
        contador_de_sete += 1
        print(f"L√ìGICA: Contagem de n√£o-7: {contador_de_sete}")

    # L√≥gica de Sugest√£o (Sugere X ap√≥s Y)
    if contador_de_sete >= 3 and LAST_RESULT != "SUGGESTED":
        condition = f"Detectados {contador_de_sete} resultados diferentes de 7 seguidos."
        suggested_bet = "SEVEN (7) - 4:1"
        
        telegram_msg = create_suggestion_message(suggested_bet, condition)
        send_telegram_message(telegram_msg)
        
        # Marca como sugerido para n√£o enviar o sinal m√∫ltiplas vezes na mesma contagem
        LAST_RESULT = "SUGGESTED" 
        return True
    
    # Se j√° sugeriu e o resultado n√£o mudou, ou se n√£o atingiu a contagem, n√£o faz nada
    elif current_result.isdigit() and LAST_RESULT == "SUGGESTED":
        LAST_RESULT = "" # Reseta o flag ap√≥s um novo resultado ser lido
        
    return False

# =================================================================
# üöÄ LOOP PRINCIPAL (SIMULA√á√ÉO)
# =================================================================

def run_bot_simulado():
    """Simula o loop principal, focado na l√≥gica de sugest√£o e Telegram."""
    
    print("Iniciando simula√ß√£o de leitura e an√°lise de 'IA'...")
    time.sleep(2)
    
    # SIMULA√á√ÉO DE RESULTADOS LIDOS PELO OCR
    simulated_results = ["4", "5", "8", "10", "7", "3", "5", "9", "4", "7", "5", "6", "10"]
    
    for result in simulated_results:
        print(f"\n[LOOP] Novo Resultado Lido (OCR SIMULADO): {result}")
        
        # Chamada da L√≥gica de 'IA'
        suggestion_sent = analyze_and_suggest(result)
        
        if suggestion_sent:
            print("üõë Sugest√£o enviada. Pausando por 30 segundos para simular aposta...")
            time.sleep(1) # Simula√ß√£o de pausa
        
        time.sleep(1) # Intervalo simulado entre lan√ßamentos

# =================================================================
# 5. EXECU√á√ÉO DO ARQUIVO
# =================================================================
if __name__ == "__main__": 
    run_bot
